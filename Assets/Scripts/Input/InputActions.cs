//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Asteroids.Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerShip"",
            ""id"": ""5358a2c9-6c10-4775-8251-777caf670a62"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""da80d212-9e9b-4dca-a684-528497681e60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d4696766-e8c8-4edd-87c5-1178a67e30d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FisrtShootButton"",
                    ""type"": ""Button"",
                    ""id"": ""daeb4ea7-f957-4e09-8005-9b8f36694fa0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondShootButton"",
                    ""type"": ""Button"",
                    ""id"": ""4df2b64f-b9e5-4d11-b72a-85a7db5345cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""785518b2-727d-4e87-ac91-ec851d14cd27"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6635a849-54ca-4383-a190-b29bacd7baf3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d6b89514-4f79-45b6-8cc1-9d21f2ae4b82"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""f810607a-757e-4b57-b174-da44c387a65e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""5107593e-f767-4acc-b458-e3997e74a16f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis "",
                    ""id"": ""3d169f54-45dc-434f-8408-8d757664f725"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""4537d75c-774a-41ae-b0fe-c6fb60ee90b8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""00ed5e99-f8dc-4126-aff5-443fdaee6b79"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e5313208-1eab-473f-95bf-0b41225f2fd4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FisrtShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c919edaa-72ef-46bf-bb1c-9a666e853258"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FisrtShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47d15fb9-00a2-4138-a365-70289e71b882"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""032908ec-d344-48f0-853b-31da330992bc"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerShip
            m_PlayerShip = asset.FindActionMap("PlayerShip", throwIfNotFound: true);
            m_PlayerShip_Accelerate = m_PlayerShip.FindAction("Accelerate", throwIfNotFound: true);
            m_PlayerShip_Rotate = m_PlayerShip.FindAction("Rotate", throwIfNotFound: true);
            m_PlayerShip_FisrtShootButton = m_PlayerShip.FindAction("FisrtShootButton", throwIfNotFound: true);
            m_PlayerShip_SecondShootButton = m_PlayerShip.FindAction("SecondShootButton", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerShip
        private readonly InputActionMap m_PlayerShip;
        private List<IPlayerShipActions> m_PlayerShipActionsCallbackInterfaces = new List<IPlayerShipActions>();
        private readonly InputAction m_PlayerShip_Accelerate;
        private readonly InputAction m_PlayerShip_Rotate;
        private readonly InputAction m_PlayerShip_FisrtShootButton;
        private readonly InputAction m_PlayerShip_SecondShootButton;
        public struct PlayerShipActions
        {
            private @InputActions m_Wrapper;
            public PlayerShipActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Accelerate => m_Wrapper.m_PlayerShip_Accelerate;
            public InputAction @Rotate => m_Wrapper.m_PlayerShip_Rotate;
            public InputAction @FisrtShootButton => m_Wrapper.m_PlayerShip_FisrtShootButton;
            public InputAction @SecondShootButton => m_Wrapper.m_PlayerShip_SecondShootButton;
            public InputActionMap Get() { return m_Wrapper.m_PlayerShip; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerShipActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerShipActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Add(instance);
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @FisrtShootButton.started += instance.OnFisrtShootButton;
                @FisrtShootButton.performed += instance.OnFisrtShootButton;
                @FisrtShootButton.canceled += instance.OnFisrtShootButton;
                @SecondShootButton.started += instance.OnSecondShootButton;
                @SecondShootButton.performed += instance.OnSecondShootButton;
                @SecondShootButton.canceled += instance.OnSecondShootButton;
            }

            private void UnregisterCallbacks(IPlayerShipActions instance)
            {
                @Accelerate.started -= instance.OnAccelerate;
                @Accelerate.performed -= instance.OnAccelerate;
                @Accelerate.canceled -= instance.OnAccelerate;
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @FisrtShootButton.started -= instance.OnFisrtShootButton;
                @FisrtShootButton.performed -= instance.OnFisrtShootButton;
                @FisrtShootButton.canceled -= instance.OnFisrtShootButton;
                @SecondShootButton.started -= instance.OnSecondShootButton;
                @SecondShootButton.performed -= instance.OnSecondShootButton;
                @SecondShootButton.canceled -= instance.OnSecondShootButton;
            }

            public void RemoveCallbacks(IPlayerShipActions instance)
            {
                if (m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerShipActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerShipActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerShipActions @PlayerShip => new PlayerShipActions(this);
        public interface IPlayerShipActions
        {
            void OnAccelerate(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnFisrtShootButton(InputAction.CallbackContext context);
            void OnSecondShootButton(InputAction.CallbackContext context);
        }
    }
}
